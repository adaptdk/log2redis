<?php

/**
 * Implements hook_watchdog().
 */
function log2redis_watchdog(array $entry) {
  static $redis_is_up = NULL;
  // Return quickly if redis is not up for this request.
  if ($redis_is_up === FALSE || !class_exists('Redis_Client')) {
    return;
  }

  // We want to die early if we can't reach the redis server.
  if ($redis_is_up === NULL) {
    $host = variable_get('redis_client_host', '127.0.0.2');
    $port = variable_get('redis_client_port', '6379');
    $errno = NULL; // Satisfying the pass variables by reference notice.
    $errstr = NULL; // Satisfying the pass variables by reference notice.
    $timeout = variable_get('log2redis_client_timeout', 0.1);
    // We want fsockopen to fail silently!
    $connection = @fsockopen($host, $port, $errno, $errstr, $timeout);
    if ($connection === FALSE) {
      // We expect the redis connection is down for this request.
      $redis_is_up = FALSE;
      return;
    }
    else {
      $redis_is_up = TRUE;
      fclose($connection);
    }
  }

  $redis = Redis_Client::getManager()->getClient();

  if (!($redis instanceof \Predis\Client)) {
    return;
  }

  // The user object may not exist in all conditions, so 0 is substituted if needed.
  $entry['uid'] = isset($entry['user']->uid) ? $entry['user']->uid : 0;
  $entry['hostname'] = $entry['ip'];
  $entry['location'] = $entry['request_uri'];

  $entry['identifier'] = variable_get('log2redis_log_identifier', 'drupal');

  $entry['tags'] = variable_get('log2redis_tags', array());
  $entry['tags'][] = $entry['type'];
  $entry['tags'][] = drupal_html_class($entry['type']);
  unset($entry['type']);
  $entry['tags'][] = $entry['identifier'];

  $key = variable_get('log2redis_key', 'logstash');

  $redis->rpush($key, json_encode($entry));
}
